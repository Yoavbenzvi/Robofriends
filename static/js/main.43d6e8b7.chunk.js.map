{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","height","children","Header","React","Component","mapDispatchToProps","onSearchChange","event","payload","target","value","onRequestRobots","dispatch","fetch","then","response","json","catch","App","this","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","requestRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43d6e8b7.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, {type, payload}) => {\r\n\tswitch(type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn {...state, searchField: payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\t\t\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, { type, payload }) => {\r\n\t\tswitch(type) {\r\n\t\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\t\treturn {...state, isPending: true};\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn {...state, robots: payload, isPending: false};\r\n\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t\treturn {...state, error: payload , isPending: false};\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Seacrh Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n\tshouldComponentUpdate() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <h1 className='f1'>RoboFriends</h1>\r\n\t}\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => ({                   \r\n   searchField: state.searchRobots.searchField,\r\n   robots: state.requestRobots.robots,\r\n   isPending: state.requestRobots.isPending,\r\n   error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n   onSearchChange: (event) => setSearchField(event.target.value),\r\n   onRequestRobots: () => requestRobots()\r\n}\r\n\r\nclass App extends Component {\r\n\r\n   componentDidMount() {\r\n      this.props.onRequestRobots()\r\n   }\r\n\r\n   render() {\r\n      const { searchField, onSearchChange, robots, isPending } = this.props;\r\n      const filteredRobots = robots.filter(robot =>{\r\n         return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      })\r\n\r\n      return isPending ?\r\n      <h1 className='tc'>Loading</h1> :\r\n      (\r\n         <div className='tc'>\r\n            <Header />\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n               <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (payload) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload,\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response=> response.json())\r\n    \t.then(payload => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload}))\r\n    \t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED}))   \r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { logger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst rootReducer = combineReducers({\r\n\tsearchRobots,\r\n\trequestRobots\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, /*logger*/))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}